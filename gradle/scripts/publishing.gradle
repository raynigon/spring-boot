signing {
    required {
        findProperty("signingKey") != null
    }
    String signingKey = findProperty("signingKey")
    String signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

publishing {
    repositories {
        maven {
            name = "OSSRH" // OSS Repository Hosting
            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials {
                username = System.getenv("OSSRH_USERNAME") ?: null
                password = System.getenv("OSSRH_PASSWORD") ?: null
            }

        }
    }
    publications {
        create("maven", MavenPublication) {
            artifactId = project.name

            from components.java
            artifact tasks.sourcesJar
            artifact tasks.javadocJar

            pom {
                name = project.name
                description = "The ${project.name} is a part of the unit-api"
                url = 'https://github.com/raynigon/spring-boot/'
                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/raynigon/spring-boot/issues'
                }
                licenses {
                    license {
                        name = 'Apache-2.0'
                        url = 'https://opensource.org/licenses/Apache-2.0'
                    }
                }
                scm {
                    url = 'https://github.com/raynigon/spring-boot/'
                    connection = 'scm:git:git://github.com/raynigon/spring-boot.git'
                    developerConnection = 'scm:git:ssh://git@github.com/raynigon/spring-boot.git'
                }
                developers {
                    developer {
                        id = 'raynigon'
                        name = 'Simon Schneider'
                        email = 'opensource@raynigon.de'
                    }
                }
            }
            // Remove Spring Boot Dependency Management
            pom.withXml {
                def rootNode = asNode()
                rootNode.remove((Node) ((Node) rootNode).get("dependencyManagement").get(0))
            }
        }
    }
}
