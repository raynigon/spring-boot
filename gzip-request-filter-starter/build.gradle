plugins {
    id 'java'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.5.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'

    // Auto Update Versions
    id 'se.patrikerdes.use-latest-versions' version '0.2.17'
    id 'com.github.ben-manes.versions' version '0.39.0'

    // Auto Release
    id('net.researchgate.release') version '2.8.1'
}

group = "com.raynigon.spring-boot"
java.sourceCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

dependencies {
    compileOnly("org.springframework.boot:spring-boot-starter")
    compileOnly("org.springframework.boot:spring-boot-starter-web")

    testImplementation("org.springframework.boot:spring-boot-starter")
    testImplementation("org.springframework.boot:spring-boot-starter-web")
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    // testImplementation("org.spockframework:spock-spring")
}

bootJar {
    enabled = false
}

jar {
    enabled = true
    archiveClassifier = ''
}


signing {
    required {
        findProperty("signingKey") != null
    }
    String signingKey = findProperty("signingKey")
    String signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

publishing {
    repositories {
        maven {
            name = "OSSRH" // OSS Repository Hosting
            url = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials {
                username = System.getenv("OSSRH_USERNAME") ?: null
                password = System.getenv("OSSRH_PASSWORD") ?: null
            }

        }
    }
    publications {
        basic(MavenPublication) {
            artifactId = project.name

            artifact project.tasks.jar
            //artifact sourcesJar
            // artifact javadocJar

            pom.withXml {
                def rootNode = asNode()
                rootNode.children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST

                    name project.name
                    description "The ${project.name} is a part of the unit-api"
                    url 'https://github.com/raynigon/spring-boot-gzip-request-filter'
                    issueManagement {
                        system 'GitHub'
                        url 'https://github.com/raynigon/spring-boot-gzip-request-filter/issues'
                    }
                    licenses {
                        license {
                            name 'Apache-2.0'
                            url 'https://opensource.org/licenses/Apache-2.0'
                        }
                    }
                    scm {
                        url 'https://github.com/raynigon/spring-boot-gzip-request-filter/'
                        connection 'scm:git:git://github.com/raynigon/spring-boot-gzip-request-filter.git'
                        developerConnection 'scm:git:ssh://git@github.com/raynigon/spring-boot-gzip-request-filter.git'
                    }
                    developers {
                        developer {
                            id 'raynigon'
                            name 'Simon Schneider'
                            email 'opensource@raynigon.de'
                        }
                    }
                }

                rootNode.remove((Node) ((Node) rootNode).get("dependencyManagement").get(0))
                def dependenciesNode = rootNode.appendNode('dependencies')

                def addDependency = { dependency, scope ->
                    dependenciesNode.appendNode('dependency').with {
                        appendNode('groupId', dependency.group)
                        appendNode('artifactId', dependency.name)
                        appendNode('version', dependency.version)
                        appendNode('scope', scope)
                    }
                }
                project.configurations.implementation.dependencies.each { addDependency(it, 'compile') }
            }
        }
    }
}